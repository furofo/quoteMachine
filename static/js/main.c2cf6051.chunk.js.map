{"version":3,"sources":["index.js"],"names":["handleErr","console","log","$","document","ready","click","fadeIn","body","style","background","QuoteContainer","props","state","quote","author","link","randomQuote","bind","getJSON","done","response","setTimeout","setState","quoteText","quoteAuthor","fail","rgbArr","i","push","Math","round","random","rgbColor","getElementById","color","randomColor","hide","attr","endLink","length","linkFormatter","id","src","className","this","href","target","aria-hidden","onClick","React","Component","ReactDom","render"],"mappings":"2NAoBA,SAASA,IACLC,QAAQC,IAAI,UAhBhBC,IAAEC,UAAUC,OAAM,WAClBF,IAAE,cAAcG,OAAM,WACnBH,IAAE,SAASI,OAAO,MAClBJ,IAAE,WAAWI,OAAO,MACpBJ,IAAE,cAAcI,OAAO,MACvBJ,IAAE,gBAAgBI,OAAO,MACzBJ,IAAE,gBAAgBI,OAAO,MACzBN,QAAQC,IAAI,wBA0BfE,SAASI,KAAKC,MAAMC,WAAa,iBACjC,IAaMC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,KACPC,OAAQ,GACRC,KAAM,IAEV,EAAKC,YAAa,EAAKA,YAAYC,KAAjB,gBAPH,E,gEASE,IAAD,OAChBf,IAAEgB,QAAQ,oFACZC,MAAK,SAAAC,GACFC,YAAW,WAAO,EAAKC,SAAS,CAACT,MAAOO,EAASG,UAAWT,OAAQM,EAASI,YAAaT,KAAM,OAAQ,QAE5GU,KAAK1B,K,oCAES,IAAD,OAEVG,IAAEgB,QAAQ,oFACRC,MAAK,SAAAC,GACNC,YAAW,WAAO,EAAKC,SAAS,CAACT,MAAOO,EAASG,UAAWT,OAAQM,EAASI,cAjDnE,WAEf,IADA,IAAIE,EAAS,GACLC,EAAI,EAAGA,EAAI,EAAGA,IAClBD,EAAOE,KAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,WAEjC,IAAIC,EAAW,OAAQN,EAAO,GAAK,KAAOA,EAAO,GAAK,KAAOA,EAAO,GAAK,IACzEvB,SAASI,KAAKC,MAAMC,WAAauB,EACjC7B,SAAS8B,eAAe,QAAQzB,MAAM0B,MAAQF,EAC9C7B,SAAS8B,eAAe,UAAUzB,MAAM0B,MAAQF,EAChD7B,SAAS8B,eAAe,aAAazB,MAAMC,WAAauB,EACxD7B,SAAS8B,eAAe,eAAezB,MAAMC,WAAauB,EAC1D7B,SAAS8B,eAAe,gBAAgBzB,MAAMC,WAAauB,EAuClCG,GACCjC,IAAE,SAASkC,OAAO9B,OAAO,MACzBJ,IAAE,WAAWkC,OAAO9B,OAAO,MAC3BJ,IAAE,cAAckC,OAAO9B,OAAO,MAC9BJ,IAAE,gBAAgBkC,OAAO9B,OAAO,MAChCJ,IAAE,iBAAiBkC,OAAO9B,OAAO,MAEjCJ,IAAE,gBAAgBmC,KAAK,OA1ChC,SAACxB,GAGjB,IAFA,IACIyB,EAAU,GACNX,EAAI,EAAGA,EAAId,EAAM0B,OAAQZ,IACd,KAAZd,EAAMc,GACLW,GAAW,MAGXA,GAAWzB,EAAMc,GAGzB,MAVgB,2CAUGW,EA+BqCE,CAAcpB,EAASG,WAAa,KAAOH,EAASI,YAAc,aACnG,QAEtBC,KAAK1B,GACFC,QAAQC,IAAI,a,+BAGZ,OACJ,yBAAKwC,GAAK,WACV,yBAAKA,GAAK,eACN,yBAAKA,GAAK,aACD,4BAAQC,IAAI,oEACjB,yBAAKD,GAAK,OAAOE,UAAY,UAC7B,uBAAGA,UAAU,wBAAb,WAAiDC,KAAKhC,MAAMC,QAE5D,yBAAK4B,GAAK,SAASE,UAAY,UAC3B,uBAAGF,GAAK,eAAeG,KAAKhC,MAAME,SAEtC,yBAAK2B,GAAK,aACV,yBAAKA,GAAK,eACV,uBAAGI,KAAO,wDAAwDC,OAAS,SAASL,GAAK,eAAc,uBAAGE,UAAU,gBAAgBI,cAAY,UAChJ,uBAAGF,KAAO,mCAAmCC,OAAS,SAASL,GAAK,gBAAe,uBAAGE,UAAU,sBAAsBI,cAAY,WAElI,yBAAKN,GAAK,eACV,4BAAQA,GAAK,YAAYO,QAAWJ,KAAK5B,aAAzC,sB,GArDiBiC,IAAMC,WA8DnCC,IAASC,OAAO,kBAAC1C,EAAD,MAAoBP,SAAS8B,eAAe,U","file":"static/js/main.c2cf6051.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport './style.css'; //imports index css styling file from same directory\r\nimport $ from \"jquery\";\r\nlet jsonStored;\r\n$(document).ready(function(){\r\n$(\"#new-quote\").click(function(){\r\n   $('#text').fadeIn(1500);\r\n   $('#author').fadeIn(1500);\r\n   $('#new-quote').fadeIn(1500);\r\n   $('#tweet-quote').fadeIn(1500);\r\n   $('tumblr-quote').fadeIn(1500);\r\n   console.log(\"this worked???\");\r\n});\r\n})\r\nfunction update(response) {\r\n    jsonStored = JSON.stringify(response);\r\n    return jsonStored; \r\n                            }\r\n\r\nfunction handleErr() {\r\n    console.log(\"error?\");\r\n}\r\n\r\n let randomColor = () => { // generates random rgb color from full spectrum of colors and assigns it to everything\r\n    let rgbArr = [];\r\n    for(let i = 0; i < 3; i++) {\r\n        rgbArr.push(Math.round(Math.random() * 255));\r\n    }\r\n   let rgbColor = 'rgb(' +rgbArr[0] + ', ' + rgbArr[1] + ', ' + rgbArr[2] + ')';\r\n   document.body.style.background = rgbColor;\r\n   document.getElementById('text').style.color = rgbColor;\r\n   document.getElementById('author').style.color = rgbColor;\r\n   document.getElementById('new-quote').style.background = rgbColor;\r\n   document.getElementById('tweet-quote').style.background = rgbColor;\r\n   document.getElementById('tumblr-quote').style.background = rgbColor;\r\n}\r\nlet text= <div id = \"text\"><p></p></div>\r\ndocument.body.style.background = 'rgb(0, 10, 40)'; // inital background color\r\nlet linkFormatter = (quote) => {\r\n    let beginLink = 'https://twitter.com/intent/tweet?status=';\r\n    let endLink = '';\r\n    for(let i = 0; i < quote.length; i++) {\r\n        if(quote[i] == ' ') {\r\n            endLink += '%20';\r\n        }\r\n        else {\r\n            endLink += quote[i];\r\n        }\r\n    }\r\n    return beginLink + endLink;\r\n}\r\nclass QuoteContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            quote: null,\r\n            author: '',\r\n            link: '',\r\n        }\r\n        this.randomQuote= this.randomQuote.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        $.getJSON(\"https://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=jsonp&jsonp=?\")\r\n     .done(response => {\r\n         setTimeout(() => {this.setState({quote: response.quoteText, author: response.quoteAuthor, link: ''});}, 500);\r\n     })\r\n    .fail(handleErr)\r\n    }\r\n    randomQuote() {\r\n       \r\n        $.getJSON(\"https://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=jsonp&jsonp=?\")\r\n         .done(response => {\r\n         setTimeout(() => {this.setState({quote: response.quoteText, author: response.quoteAuthor});\r\n                            randomColor(); \r\n                             $('#text').hide().fadeIn(1500);\r\n                             $('#author').hide().fadeIn(1500);\r\n                             $('#new-quote').hide().fadeIn(1500);\r\n                             $('#tweet-quote').hide().fadeIn(1500);\r\n                             $('#tumblr-quote').hide().fadeIn(1500);\r\n                            // $(document.body).hide().fadeIn(1500)\r\n                             $('#tweet-quote').attr('href', linkFormatter(response.quoteText) + '- ' + response.quoteAuthor + \"#quotes\");\r\n                        }, 500);    \r\n     })\r\n    .fail(handleErr);\r\n        console.log(\"failed?\");\r\n        }\r\n    render() {\r\n        return (\r\n    <div id = \"wrapper\">\r\n    <div id = \"rel-wrapper\">\r\n        <div id = \"quote-box\">\r\n                 <script src=\"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\"></script>\r\n            <div id = \"text\" className = \"center\">\r\n            <i className=\"fa fas fa-quote-left\">&nbsp;&nbsp;{this.state.quote}</i>\r\n            </div>\r\n            <div id = \"author\" className = \"center\">\r\n                <p id = \"innerAuthor\">{this.state.author}</p>\r\n            </div>\r\n            <div id = \"container\" >\r\n            <div id = \"butwrapper1\">\r\n            <a href = \"https://twitter.com/intent/tweet?status=hello%20world\" target = \"_blank\" id = \"tweet-quote\"><i className=\"fa fa-twitter\" aria-hidden=\"true\"></i></a>\r\n            <a href = \"https://www.tumblr.com/dashboard\" target = '_blank' id = \"tumblr-quote\"><i className=\"fa fa-tumblr-square\" aria-hidden=\"true\"></i></a>\r\n            </div>\r\n            <div id = \"butwrapper3\">\r\n            <button id = \"new-quote\" onClick = {this.randomQuote}>New Quote</button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n        )\r\n    }\r\n}\r\nReactDom.render(<QuoteContainer />, document.getElementById('root'));"],"sourceRoot":""}